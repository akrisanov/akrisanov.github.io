<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Andrey Krisanov - tooling</title>
    <subtitle>Engineering notes and essays on AI infrastructure, large-scale inference systems, and production-grade backend design â€” from distributed serving and observability to performance tuning and reliability. Written by Andrey Krisanov.</subtitle>
    <link rel="self" type="application/atom+xml" href="https://akrisanov.com/tags/tooling/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://akrisanov.com"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-09-10T00:00:00+00:00</updated>
    <id>https://akrisanov.com/tags/tooling/atom.xml</id>
    <entry xml:lang="en">
        <title>uv: Cargo-like Python Tool That Replaces pipx, pyenv, and more</title>
        <published>2025-09-10T00:00:00+00:00</published>
        <updated>2025-09-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://akrisanov.com/uv/"/>
        <id>https://akrisanov.com/uv/</id>
        
        <content type="html" xml:base="https://akrisanov.com/uv/">&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;uv&lt;&#x2F;code&gt; is an end-to-end solution for managing &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.astral.sh&#x2F;uv&#x2F;guides&#x2F;projects&#x2F;&quot;&gt;Python projects&lt;&#x2F;a&gt;,
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.astral.sh&#x2F;uv&#x2F;guides&#x2F;tools&#x2F;&quot;&gt;command-line tools&lt;&#x2F;a&gt;,
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.astral.sh&#x2F;uv&#x2F;guides&#x2F;scripts&#x2F;&quot;&gt;single-file scripts&lt;&#x2F;a&gt;, and even
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.astral.sh&#x2F;uv&#x2F;guides&#x2F;install-python&#x2F;&quot;&gt;Python itself&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Think of it as Pythonâ€™s Cargo: a unified, crossâ€‘platform tool thatâ€™s fast, reliable, and easy to use.&lt;&#x2F;p&gt;
&lt;p&gt;This post is not a deep introduction to uv â€” many excellent articles already exist; instead,
itâ€™s a concise cheat sheet for everyday use.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;installation-updates&quot;&gt;Installation &amp;amp; Updates&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#3b224c;color:#dbbfef;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#6a7c81;&quot;&gt;# Install
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a4a0e8;&quot;&gt;curl&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#a4a0e8;&quot;&gt; -LsSf&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;astral.sh&#x2F;uv&#x2F;install.sh &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eccdbb;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a4a0e8;&quot;&gt;sh
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a7c81;&quot;&gt;# Update
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a4a0e8;&quot;&gt;uv&lt;&#x2F;span&gt;&lt;span&gt; self update
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;managing-python-versions&quot;&gt;Managing Python Versions&lt;&#x2F;h2&gt;
&lt;p&gt;Instead of juggling tools like pyenv, mise, asdf, or OSâ€‘specific hacks, you can simply use uv:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#3b224c;color:#dbbfef;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#6a7c81;&quot;&gt;# List available versions
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a4a0e8;&quot;&gt;uv&lt;&#x2F;span&gt;&lt;span&gt; python list
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a7c81;&quot;&gt;# Install Python 3.13
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a4a0e8;&quot;&gt;uv&lt;&#x2F;span&gt;&lt;span&gt; python install 3.13
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Works the same across all OSes&lt;&#x2F;li&gt;
&lt;li&gt;No admin rights required&lt;&#x2F;li&gt;
&lt;li&gt;Independent of system Python&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;You can also use &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jdx&#x2F;mise&quot;&gt;mise&lt;&#x2F;a&gt; alongside uv if you prefer a global version manager.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;projects-dependencies&quot;&gt;Projects &amp;amp; Dependencies&lt;&#x2F;h2&gt;
&lt;p&gt;Initialize a new project (creates a pyproject.toml automatically):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#3b224c;color:#dbbfef;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#a4a0e8;&quot;&gt;uv&lt;&#x2F;span&gt;&lt;span&gt; init myproject or &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a7c81;&quot;&gt;# uv init -p 3.13 --name myproject
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; myproject
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Sync dependencies (similar to &lt;code&gt;pip install -r requirements.txt&lt;&#x2F;code&gt;, but faster and more reliable):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#3b224c;color:#dbbfef;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#a4a0e8;&quot;&gt;uv&lt;&#x2F;span&gt;&lt;span&gt; sync
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add dependencies:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#3b224c;color:#dbbfef;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#a4a0e8;&quot;&gt;uv&lt;&#x2F;span&gt;&lt;span&gt; add litestar
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a4a0e8;&quot;&gt;uv&lt;&#x2F;span&gt;&lt;span&gt; add pytest&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#a4a0e8;&quot;&gt; --dev
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Lock dependencies (generates a crossâ€‘platform lockfile, like Pipfile.lock or poetry.lock):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#3b224c;color:#dbbfef;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#a4a0e8;&quot;&gt;uv&lt;&#x2F;span&gt;&lt;span&gt; lock
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;ðŸ’¡ The lock file is cross platform, so you can develop on Windows and deploy on Linux.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;fast-virtual-environments&quot;&gt;Fast Virtual Environments&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#3b224c;color:#dbbfef;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#6a7c81;&quot;&gt;# Create &amp;amp; activate venv automatically
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a4a0e8;&quot;&gt;uv&lt;&#x2F;span&gt;&lt;span&gt; venv
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span&gt; .venv&#x2F;bin&#x2F;activate
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a7c81;&quot;&gt;# Or skip activation and run directly with uv:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a4a0e8;&quot;&gt;uv&lt;&#x2F;span&gt;&lt;span&gt; run python app.py
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;scripts&quot;&gt;Scripts&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#3b224c;color:#dbbfef;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#6a7c81;&quot;&gt;# Create a new script
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a4a0e8;&quot;&gt;uv&lt;&#x2F;span&gt;&lt;span&gt; init&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#a4a0e8;&quot;&gt; --script
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#3b224c;color:#dbbfef;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#6a7c81;&quot;&gt;# &#x2F;&#x2F;&#x2F; script
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a7c81;&quot;&gt;# requires-python = &amp;quot;&amp;gt;=3.13&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a7c81;&quot;&gt;# dependencies = [
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a7c81;&quot;&gt;#     &amp;quot;requests&amp;quot;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a7c81;&quot;&gt;# ]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a7c81;&quot;&gt;# &#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eccdbb;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;requests
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(requests.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a4a0e8;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;akrisanov.com&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Run singleâ€‘file scripts with automatic dependency installation:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#3b224c;color:#dbbfef;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#a4a0e8;&quot;&gt;uv&lt;&#x2F;span&gt;&lt;span&gt; run script.py
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;ðŸ’¡  On *nix, add &lt;code&gt;#!&#x2F;usr&#x2F;bin&#x2F;env -S uv run&lt;&#x2F;code&gt; (then &lt;code&gt;chmod +x&lt;&#x2F;code&gt;) to automatically call &lt;code&gt;uv run&lt;&#x2F;code&gt; for a script.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;tools&quot;&gt;Tools&lt;&#x2F;h2&gt;
&lt;p&gt;Install CLI tools globally, isolated from system Python:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#3b224c;color:#dbbfef;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;uv tool install ruff &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a7c81;&quot;&gt;# replaces pipx
&lt;&#x2F;span&gt;&lt;span&gt;uv tool install httpie
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;uvx httpie &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a7c81;&quot;&gt;# a shortcut
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a7c81;&quot;&gt;# --with [temp dependency] runs jupyter in the current project
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a7c81;&quot;&gt;# without adding it and its dependencies to the project
&lt;&#x2F;span&gt;&lt;span&gt;uv run &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eccdbb;&quot;&gt;--with &lt;&#x2F;span&gt;&lt;span&gt;jupyter jupyter notebook
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;ðŸ’¡ &lt;code&gt;uv&lt;&#x2F;code&gt; run is fast enough that it implicitly reâ€‘locks and reâ€‘syncs the project each time, keeping your environment
up to date automatically.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;If you&#x27;re developing a CLI tool, uv can help minimize the friction:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#3b224c;color:#dbbfef;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#a4a0e8;&quot;&gt;uv&lt;&#x2F;span&gt;&lt;span&gt; init&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#a4a0e8;&quot;&gt; --package&lt;&#x2F;span&gt;&lt;span&gt; your_tool
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a4a0e8;&quot;&gt;uv&lt;&#x2F;span&gt;&lt;span&gt; tool install .&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#a4a0e8;&quot;&gt; -e
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;See the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.astral.sh&#x2F;uv&#x2F;concepts&#x2F;tools&#x2F;&quot;&gt;tools documentation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;replacing-pip-tools&quot;&gt;Replacing pip-tools&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#3b224c;color:#dbbfef;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#a4a0e8;&quot;&gt;uv&lt;&#x2F;span&gt;&lt;span&gt; pip compile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a7c81;&quot;&gt;# replaces pip-tools compile
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a4a0e8;&quot;&gt;uv&lt;&#x2F;span&gt;&lt;span&gt; pip sync    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a7c81;&quot;&gt;# replaces pip-tools sync
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;building-and-publishing-packages&quot;&gt;Building and publishing packages&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#3b224c;color:#dbbfef;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#6a7c81;&quot;&gt;# Build a `.whl` package for PyPI
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a4a0e8;&quot;&gt;uv&lt;&#x2F;span&gt;&lt;span&gt; build
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a7c81;&quot;&gt;# Upload your Python package to PyPI
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a4a0e8;&quot;&gt;uv&lt;&#x2F;span&gt;&lt;span&gt; publish
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;pre-commit-hooks&quot;&gt;Pre-commit hooks&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#3b224c;color:#dbbfef;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#a4a0e8;&quot;&gt;uv&lt;&#x2F;span&gt;&lt;span&gt; run&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#a4a0e8;&quot;&gt; --with&lt;&#x2F;span&gt;&lt;span&gt; pre-commit-uv pre-commit run&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#a4a0e8;&quot;&gt; --all-files
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a4a0e8;&quot;&gt;pre-commit-uv
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;github-actions&quot;&gt;GitHub Actions&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#3b224c;color:#dbbfef;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;astral-sh&#x2F;setup-uv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6a7c81;&quot;&gt;# brings UV to GitHub Actions
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;docker&quot;&gt;Docker&lt;&#x2F;h2&gt;
&lt;p&gt;Official Docker images provide uv and Python preinstalled:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dockerfile&quot; style=&quot;background-color:#3b224c;color:#dbbfef;&quot; class=&quot;language-dockerfile &quot;&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span&gt;ghcr.io&#x2F;astral-sh&#x2F;uv:latest
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Also, check &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hynek.me&#x2F;articles&#x2F;docker-uv&#x2F;&quot;&gt;Production-ready Python Docker Containers with uv&lt;&#x2F;a&gt; by Hynek Schlawack.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;workspaces&quot;&gt;Workspaces&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;uv&lt;&#x2F;code&gt; supports organizing one or more packages into a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.astral.sh&#x2F;uv&#x2F;concepts&#x2F;projects&#x2F;workspaces&#x2F;&quot;&gt;workspace&lt;&#x2F;a&gt;
to manage them together.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Example&lt;&#x2F;em&gt;: you might have a FastAPI web application alongside several libraries, all versioned and maintained as separate
Python packages in the same Git repository.&lt;&#x2F;p&gt;
&lt;p&gt;In a workspace, each package has its ownÂ &lt;code&gt;pyproject.toml&lt;&#x2F;code&gt;, but the workspace shares a single lockfile, ensuring that
the workspace operates with a consistent set of dependencies.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;things-to-keep-in-mind&quot;&gt;Things to Keep in Mind&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;uv sync&lt;&#x2F;code&gt; respects &lt;code&gt;.python-version&lt;&#x2F;code&gt;, but the &lt;code&gt;UV_PYTHON&lt;&#x2F;code&gt; environment variable takes precedence&lt;&#x2F;li&gt;
&lt;li&gt;Uses pythonâ€‘buildâ€‘standalone, which can be slightly slower than system builds (~1â€“3%) and lacks CPUâ€‘specific optimizations&lt;&#x2F;li&gt;
&lt;li&gt;Cache size can grow large (a tradeâ€‘off for speed and reliability)&lt;&#x2F;li&gt;
&lt;li&gt;Legacy projects may fail if they depended on pipâ€™s older, looser dependency resolution rules&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;why-uv-matters&quot;&gt;Why uv Matters&lt;&#x2F;h2&gt;
&lt;p&gt;Python has always had a fragmented ecosystem of tools: pip, pip-tools, virtualenv, venv, pipx, pyenv, poetry, toxâ€¦&lt;&#x2F;p&gt;
&lt;p&gt;With uv, we finally get something closer to Rustâ€™s Cargo or JavaScriptâ€™s npm&#x2F;pnpm:
a single, consistent, crossâ€‘platform tool for environments, dependencies, scripts, and tools â€” and itâ€™s fast.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;references-further-reading&quot;&gt;References &amp;amp; Further Reading&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.astral.sh&#x2F;uv&#x2F;concepts&#x2F;projects&#x2F;dependencies&#x2F;#dependency-sources&quot;&gt;Dependency Sources&lt;&#x2F;a&gt;
â€” explains how uv resolves dependencies&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;blog.pecar.me&#x2F;uv-with-django&quot;&gt;UV with Django&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;peps.python.org&#x2F;pep-0723&#x2F;&quot;&gt;PEP 723 â€“ Inline script metadata&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;astral-sh&#x2F;uv&#x2F;issues&#x2F;5903&quot;&gt;WIP: Using uv run as a task runner&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;additional-notes&quot;&gt;Additional Notes&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;While some people donâ€™t care about uv being fast, itâ€™s shaved minutes off CI builds and container rebuilds â€”
saving money and energy.&lt;&#x2F;li&gt;
&lt;li&gt;Astral capitalized on a very promising project called
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;astral-sh&#x2F;python-build-standalone&quot;&gt;python-build-standalone&lt;&#x2F;a&gt; and now maintains it.
These are Python builds that work without installers.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
</feed>
